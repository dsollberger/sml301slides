{
  "hash": "4cad15363aa537532b1eb8ed59f426a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"6: Decision Trees\"\nauthor: \"Derek Sollberger\"\ndate: \"2025-02-12\"\nformat:\n  html:\n    toc: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Session 6: Decision Trees\n\n## Learning objectives:\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n- Start to form decision trees\n- Partition decision space\n- Explore Shannon entropy\n:::\n\n::: {.column width=\"10%\"}\n\n:::\n\n::: {.column width=\"45%\"}\n![decision tree](penguins_tree_example.png)\n:::\n\n::::\n\n# Scenario: Palmer Penguins\n\n::::: {.panel-tabset}\n\n## Penguins!\n\n![Palmer Penguins](lter_penguins.png)\n\n## Predictors\n\n![the bills](culmen_depth.png)\n\n## Categorical Prediction\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n:::::\n\n\n# First Tree\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## First Choice\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Next Choice\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Cutoff\n\nIf we *cutoff* the tree-making process here, we have trained the tree model as follows\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Data Split\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Metrics\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       109         2      0\n  Chinstrap      2        43      0\n  Gentoo         0         4     89\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.9679\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.881\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n# Another Tree\n\n## Categorical Prediction\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## First Choice\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Next Choice\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## Metrics\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       107        49      0\n  Chinstrap      0         0      0\n  Gentoo         4         0     89\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.7871\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.75\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n# Several Splits\n\n::::: {.panel-tabset}\n\n## Motivation\n\nTo avoid bias (part of the bias-variance trade-off), we should employ multiple training-testing splits.\n\n## 1\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       101        55      4\n  Chinstrap      0         0      0\n  Gentoo         3         1     85\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.747\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.7738\n```\n\n\n:::\n:::\n\n\n\n:::\t\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## 2\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       108        48      0\n  Chinstrap      0         0      0\n  Gentoo         1         1     91\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.7992\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.7143\n```\n\n\n:::\n:::\n\n\n\n:::\t\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## 3\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       113        50      2\n  Chinstrap      0         0      0\n  Gentoo         0         1     83\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.7871\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.7976\n```\n\n\n:::\n:::\n\n\n\n:::\t\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## 4\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       109        50      1\n  Chinstrap      4         6      0\n  Gentoo         0         1     78\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.7751\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.8571\n```\n\n\n:::\n:::\n\n\n\n:::\t\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## 5\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie       105        41      0\n  Chinstrap      4         7      0\n  Gentoo         5         0     87\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTraining accuracy: 0.7992\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nTesting accuracy: 0.7381\n```\n\n\n:::\n:::\n\n\n\n:::\t\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## CV Error\n\nAfter $k$ **folds** of cross-validation, we compute the cross-validation accuracy by taking the average of the accuracy values.\n\n$$\\text{CV error} = \\displaystyle\\frac{0.7738 + 0.7143 + 0.7976 + 0.8571 + 0.7381}{5} \\approx 0.7762$$\n\n:::::\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Choice Order\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n\n## Entropy\n\nFrom information theory, we borrow the notion of **Shannon entropy** to get a sense of how well a choice can separate classes in the data. \n\n$$E = -\\sum_{i=1}^{J} p_{i} \\log_{2} p_{i}$$\n\n* $J$ groups in the categorical response variable\n* $p_{i}$: probability of being in group $i$\n* logarithm base does not matter (since we will simply be seeking a maximum)\n\n## Categorical Predictors\n\n::::: {.panel-tabset}\n\n### Island\n\nIn the `penguins` data, we have a distribution in the `island` variable.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   Biscoe     Dream Torgersen \n      163       123        47 \n```\n\n\n:::\n:::\n\n\n\nAmong $n = 333$ penguins in total, the entropy for this choice is\n\n$$E = -\\left(\\frac{163}{333}\\right)\\log_{2} \\left(\\frac{163}{333}\\right) - \\left(\\frac{123}{333}\\right)\\log_{2} \\left(\\frac{123}{333}\\right) - \\left(\\frac{47}{333}\\right)\\log_{2} \\left(\\frac{47}{333}\\right)$$\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The entropy for this variable is: 1.4339\"\n```\n\n\n:::\n:::\n\n\n\n### Sex\n\nIn the `penguins` data, we have a distribution in the `sex` variable.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nfemale   male \n   165    168 \n```\n\n\n:::\n:::\n\n\n\nAmong $n = 333$ penguins in total, the entropy for this choice is\n\n$$E = -\\left(\\frac{165}{333}\\right)\\log_{2} \\left(\\frac{165}{333}\\right) - \\left(\\frac{168}{333}\\right)\\log_{2} \\left(\\frac{168}{333}\\right)$$\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The entropy for this variable is: 0.9999\"\n```\n\n\n:::\n:::\n\n\n\n### Choice\n\nBetween these categorical variables, `island` presents more information entropy than `sex`, so `island` could be used before `sex` for the entire data set (i.e. the entropy comparison could change later under a smaller subset of data).\n\n:::::\n\n\n## Numerical Predictors\n\n::::: {.panel-tabset}\n\n### formula\n\nWe need to update our formula for Shannon entropy for a numerical variable.  Here, I suggest computing the probabilities across a discretization of the numerical variable.\n\n$$\\begin{array}{rcl}\n  E & = & -\\displaystyle\\text{max}_{z} \\sum_{i=1}^{J} P(X_{i} \\leq z)\\log_{2}P(X_{i} \\leq z) \\\\\n  ~ & ~ & - \\sum_{i=1}^{J} P(X_{i} > z)\\log_{2}P(X_{i} > z)\n\\end{array}$$\n\n$$z \\in \\mathbb{N}, \\quad \\text{min}(X) < z < \\text{max}(Z)$$\n\nTo avoid taking logarithms of zero probabilities, we can apply a *Laplace adjustment*\n\n$$P(X_{i} < z) = \\frac{(\\text{count}_{i} < z) + 1}{\\text{total count} + 1}$$\n\n### bill depth\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.53757237950003\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 16\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n### bill length\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.56651763573707\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 42\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n### body mass\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.54388648974619\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 4800\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n### flipper length\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.36723424446796\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 207\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n:::::\n\n\n# First Node\n\nOut of the numerical predictors, we have the most entropy from the `flipper_length_mm` variable, so that becomes our first node in the decision tree.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n\n# Second Node\n\nWe now focus on one of leaves (`flipper_length_mm` < 206)\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::::: {.panel-tabset}\n\n### bill depth\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.76335733794724\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 21\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n### bill length\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -0.825053496962708\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 45\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n### body mass\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.68294309563248\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 3175\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n### flipper length\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nmax entropy: -1.61011231175945\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthreshold: 186\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n:::::\n\nOut of the numerical predictors, we have the most entropy from the `bill_length_mm` variable, so that becomes our next node in the decision tree.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06_decision_trees_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n# Quo Vadimus?\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n* due this Friday (5 PM):\n\n    - Precept 3\n    - pick group members\n\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"50%\"}\n\n:::\n\n::::\n\n\n# Footnotes\n\n::: {.callout-note collapse=\"true\"}\n\n## (optional) Additional Resources and References\n\n* Plotting Decision Trees](https://www.spsanderson.com/steveondata/posts/2023-09-29/index.html) in R with `rpart` and `rpart.plot` by Steven P Sanderson II\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Session Info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.2 (2024-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] yardstick_1.3.1      workflowsets_1.1.0   workflows_1.1.4     \n [4] tune_1.2.1           tidyr_1.3.1          tibble_3.2.1        \n [7] recipes_1.0.10       purrr_1.0.4          parsnip_1.2.1       \n[10] modeldata_1.4.0      infer_1.0.7          dials_1.3.0         \n[13] scales_1.3.0         broom_1.0.7          tidymodels_1.2.0    \n[16] rsample_1.2.1        rpart.plot_3.1.2     rpart_4.1.23        \n[19] palmerpenguins_0.1.1 ggtext_0.1.2         GGally_2.2.1        \n[22] ggplot2_3.5.1        dplyr_1.1.4         \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1    timeDate_4032.109   farver_2.1.2       \n [4] fastmap_1.2.0       digest_0.6.37       timechange_0.3.0   \n [7] lifecycle_1.0.4     survival_3.7-0      magrittr_2.0.3     \n[10] compiler_4.4.2      rlang_1.1.5         tools_4.4.2        \n[13] yaml_2.3.10         data.table_1.16.2   knitr_1.49         \n[16] labeling_0.4.3      htmlwidgets_1.6.4   plyr_1.8.9         \n[19] xml2_1.3.6          DiceDesign_1.10     RColorBrewer_1.1-3 \n[22] withr_3.0.2         nnet_7.3-19         grid_4.4.2         \n[25] colorspace_2.1-1    future_1.33.2       globals_0.16.3     \n[28] iterators_1.0.14    MASS_7.3-61         cli_3.6.3          \n[31] rmarkdown_2.29      generics_0.1.3      rstudioapi_0.17.1  \n[34] future.apply_1.11.2 commonmark_1.9.2    stringr_1.5.1      \n[37] splines_4.4.2       parallel_4.4.2      vctrs_0.6.5        \n[40] hardhat_1.4.0       Matrix_1.7-1        jsonlite_1.8.9     \n[43] listenv_0.9.1       foreach_1.5.2       gower_1.0.1        \n[46] glue_1.8.0          parallelly_1.37.1   ggstats_0.7.0      \n[49] codetools_0.2-20    stringi_1.8.4       lubridate_1.9.3    \n[52] gtable_0.3.6        munsell_0.5.1       GPfit_1.0-8        \n[55] furrr_0.3.1         pillar_1.10.1       htmltools_0.5.8.1  \n[58] ipred_0.9-14        lava_1.8.0          R6_2.5.1           \n[61] lhs_1.2.0           evaluate_1.0.3      lattice_0.22-6     \n[64] markdown_1.13       backports_1.5.0     gridtext_0.1.5     \n[67] class_7.3-22        Rcpp_1.0.12         prodlim_2024.06.25 \n[70] xfun_0.50           pkgconfig_2.0.3    \n```\n\n\n:::\n:::\n\n\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\t\n:::\n\n::: {.column width=\"10%\"}\n\t\n:::\n\n::: {.column width=\"45%\"}\n\n:::\n\n::::\n\n::::: {.panel-tabset}\n\n\n\n:::::",
    "supporting": [
      "06_decision_trees_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}